/*
  Copyright (c) 2014-2015 NicoHood
  See the readme for credit to other people.

  Improved Keyboard example

  Shows how to use the new Keyboard API.

  See HID Project documentation for more information.
  https://github.com/NicoHood/HID/wiki/Keyboard-API#improved-keyboard
*/

#include "HID-Project.h"
#include "Name.h"
#include "LogoMochi.h"
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeMonoBoldOblique24pt7b.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4        // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);

#define bitmap_height 128
#define bitmap_width 32

const int pinLed = LED_BUILTIN;
const int REDL = 16;
const int REDR = 14;
const int BLUEL = 15;
const int BLUER = 10;

byte REDRoldState = HIGH;
byte REDLoldState = HIGH;
byte BLUERoldState = HIGH;
byte BLUELoldState = HIGH;

const unsigned long debounceTime = 40;  // milliseconds
unsigned long task_time_ms = 0;
unsigned long REDRswitchPressTime;  // when the switch last changed state
unsigned long REDLswitchPressTime;  // when the switch last changed state
unsigned long BLUERswitchPressTime;  // when the switch last changed state
unsigned long BLUELswitchPressTime;  // when the switch last changed state

bool isUp = false;

static const unsigned char PROGMEM kaUp[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x27, 0xF1, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x5F, 0xE6, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xBF, 0xC8, 0x7E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x7F, 0x91, 0xFF, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0x13, 0xFF, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0x27, 0xFF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x8F, 0xC1, 0xF0, 0x00,
        0x00, 0x05, 0xFE, 0x27, 0xFC, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x9F, 0xC1, 0xF0, 0x00,
        0x00, 0x05, 0xFE, 0x4F, 0x38, 0x72, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x9F, 0xE1, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x18, 0x72, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x1F, 0xE1, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x1C, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFE, 0x3F, 0xE1, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x3F, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x3F, 0xF1, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0xF6, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x3C, 0xF1, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x69, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x78, 0x71, 0xF0, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0x9D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x78, 0x79, 0xF0, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0xDD, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFE, 0x7F, 0xF8, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x93, 0xE3, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x7F, 0xF9, 0xF0, 0x00,
        0x00, 0x02, 0xFF, 0xD1, 0xFF, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0x78, 0xFF, 0xF0, 0x00,
        0x00, 0x03, 0xFE, 0x48, 0x7E, 0x13, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x8F, 0x78, 0xFD, 0xF0, 0x00,
        0x00, 0x04, 0xFC, 0x66, 0x00, 0x70, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x38, 0xE0, 0x91, 0x81, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x21, 0xFF, 0xFE, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x21, 0x01, 0x08, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x11, 0x01, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x0E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char PROGMEM kaDown[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x27, 0xF1, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x5F, 0xE6, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x8F, 0xC1, 0xF0, 0x00,
        0x00, 0x00, 0xBF, 0xC8, 0x7E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x9F, 0xC1, 0xF0, 0x00,
        0x00, 0x01, 0x7F, 0x91, 0xFF, 0x88, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x9F, 0xE1, 0xF0, 0x00,
        0x00, 0x02, 0xFF, 0x13, 0xFF, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x1F, 0xE1, 0xF0, 0x00,
        0x00, 0x02, 0xFF, 0x27, 0xFF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFE, 0x3F, 0xE1, 0xF0, 0x00,
        0x00, 0x05, 0xFE, 0x27, 0xFC, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x3F, 0xF1, 0xF0, 0x00,
        0x00, 0x05, 0xFE, 0x4F, 0x38, 0x72, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x3C, 0xF1, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x18, 0x72, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x78, 0x71, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x1C, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x78, 0x79, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x3F, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFE, 0x7F, 0xF8, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0xF6, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x7F, 0xF9, 0xF0, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x69, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0x78, 0xFF, 0xF0, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0x9D, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x8F, 0x78, 0xFD, 0xF0, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0xDD, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x93, 0xE3, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0xD1, 0xFF, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xFE, 0x48, 0x7E, 0x13, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x04, 0xFC, 0x66, 0x00, 0x70, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x38, 0xE0, 0x91, 0x81, 0x88, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x21, 0xFF, 0xFE, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x21, 0x01, 0x08, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x11, 0x01, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x0E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char PROGMEM donUp[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x27, 0xF1, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x5F, 0xE6, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xBF, 0xC8, 0x7E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x7F, 0x91, 0xFF, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0x13, 0xFF, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0x27, 0xFF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0xFE, 0x27, 0xFC, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0xFE, 0x4F, 0x38, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x18, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x1C, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x3F, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0xF6, 0xF2, 0x00, 0x03, 0xFF, 0x03, 0xFC, 0x3E, 0x3E, 0x7C, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x69, 0xF2, 0x00, 0x03, 0xFF, 0x87, 0xFE, 0x3F, 0x3E, 0x7C, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0x9D, 0xE4, 0x00, 0x03, 0xFF, 0xCF, 0xFF, 0x3F, 0xBE, 0x7C, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0xDD, 0xE4, 0x00, 0x03, 0xEF, 0xEF, 0xFF, 0xBF, 0xBE, 0x7C, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x93, 0xE3, 0xC8, 0x00, 0x03, 0xE7, 0xEF, 0x9F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0xD1, 0xFF, 0x8C, 0x00, 0x03, 0xE3, 0xEF, 0x0F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x03, 0xFE, 0x48, 0x7E, 0x13, 0x80, 0x03, 0xE3, 0xEF, 0x0F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x04, 0xFC, 0x66, 0x00, 0x70, 0x40, 0x03, 0xE3, 0xEF, 0x0F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x38, 0xE0, 0x91, 0x81, 0x88, 0x40, 0x03, 0xE7, 0xEF, 0x9F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x41, 0x21, 0xFF, 0xFE, 0x08, 0x40, 0x03, 0xEF, 0xEF, 0xFF, 0xBE, 0xFE, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x21, 0x01, 0x08, 0x08, 0x80, 0x03, 0xFF, 0xCF, 0xFF, 0x3E, 0x7E, 0x7C, 0x00, 0x00,
        0x00, 0x42, 0x11, 0x01, 0x08, 0x07, 0x00, 0x03, 0xFF, 0x87, 0xFE, 0x3E, 0x7E, 0xFC, 0x00, 0x00,
        0x00, 0x22, 0x0E, 0x00, 0x90, 0x00, 0x00, 0x03, 0xFF, 0x03, 0xFC, 0x3E, 0x3E, 0x7C, 0x00, 0x00,
        0x00, 0x1C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


static const unsigned char PROGMEM donDown[] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x27, 0xF1, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x5F, 0xE6, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xBF, 0xC8, 0x7E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x7F, 0x91, 0xFF, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0x13, 0xFF, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0x27, 0xFF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0xFE, 0x27, 0xFC, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0xFE, 0x4F, 0x38, 0x72, 0x00, 0x03, 0xFF, 0x03, 0xFC, 0x3E, 0x3E, 0x7C, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x18, 0x72, 0x00, 0x03, 0xFF, 0x87, 0xFE, 0x3F, 0x3E, 0x7C, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4E, 0x1C, 0xF2, 0x00, 0x03, 0xFF, 0xCF, 0xFF, 0x3F, 0xBE, 0x7C, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x3F, 0xF2, 0x00, 0x03, 0xEF, 0xEF, 0xFF, 0xBF, 0xBE, 0x7C, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0xF6, 0xF2, 0x00, 0x03, 0xE7, 0xEF, 0x9F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x0B, 0xFE, 0x4F, 0x69, 0xF2, 0x00, 0x03, 0xE3, 0xEF, 0x0F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0x9D, 0xE4, 0x00, 0x03, 0xE3, 0xEF, 0x0F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x27, 0xDD, 0xE4, 0x00, 0x03, 0xE3, 0xEF, 0x0F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x05, 0xFF, 0x93, 0xE3, 0xC8, 0x00, 0x03, 0xE7, 0xEF, 0x9F, 0xBF, 0xFE, 0x7C, 0x00, 0x00,
        0x00, 0x02, 0xFF, 0xD1, 0xFF, 0x8C, 0x00, 0x03, 0xEF, 0xEF, 0xFF, 0xBE, 0xFE, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xFE, 0x48, 0x7E, 0x13, 0x80, 0x03, 0xFF, 0xCF, 0xFF, 0x3E, 0x7E, 0x7C, 0x00, 0x00,
        0x00, 0x04, 0xFC, 0x66, 0x00, 0x70, 0x40, 0x03, 0xFF, 0x87, 0xFE, 0x3E, 0x7E, 0xFC, 0x00, 0x00,
        0x00, 0x38, 0xE0, 0x91, 0x81, 0x88, 0x40, 0x03, 0xFF, 0x03, 0xFC, 0x3E, 0x3E, 0x7C, 0x00, 0x00,
        0x00, 0x41, 0x21, 0xFF, 0xFE, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x21, 0x01, 0x08, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x42, 0x11, 0x01, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x22, 0x0E, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void setup()
{
  pinMode(REDL, INPUT_PULLUP);
  pinMode(REDR, INPUT_PULLUP);
  pinMode(BLUEL, INPUT_PULLUP);
  pinMode(BLUER, INPUT_PULLUP);

  Wire.setClock(400000);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    for (;;)
      ; // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.

  // Clear the buffer
  for(int i=-36; i<0; i++)
  {
    display.clearDisplay();
    display.drawBitmap(i, 0, LogoMochi, 33, 27, WHITE);
    display.display();
  }

  for(int i=-21; i<3; i++)
  {
    display.clearDisplay();
    display.drawBitmap(0, 0, LogoMochi, 33, 27, WHITE);
    display.drawBitmap(35,i, NameOled, 91, 23, WHITE);
    display.display();
  }

  delay(2000);

  display.clearDisplay();
  display.drawBitmap(0, 0, kaDown, bitmap_height, bitmap_width, WHITE);
  display.display();
  
  // Sends a clean report to the host. This is important on any Arduino type.
  Keyboard.begin();
}

void loop()
{

  // Trigger caps lock manually via button
  byte REDRState = digitalRead(REDR);
  byte REDLState = digitalRead(REDL);
  byte BLUERState = digitalRead(BLUER);
  byte BLUELState = digitalRead(BLUEL);


  if((millis()-task_time_ms) >= 500)
  {
    display.clearDisplay();
    if (isUp)
      display.drawBitmap(0, 0, kaDown, bitmap_height, bitmap_width, WHITE);
    else
      display.drawBitmap(0, 0, donUp, bitmap_height, bitmap_width, WHITE);
      
    isUp = !isUp;
    display.display();
    task_time_ms = millis();
  }


  if (REDRState != REDRoldState)
  {
    // debounce
    if (millis() - REDRswitchPressTime >= debounceTime)
    {
      REDRswitchPressTime = millis();
      REDRoldState = REDRState;

      if(REDRState == LOW)
      {
        /*
        display.clearDisplay();

        if (isUp)
          display.drawBitmap(0, 0, donDown, bitmap_height, bitmap_width, WHITE);
        else
          display.drawBitmap(0, 0, donUp, bitmap_height, bitmap_width, WHITE);
          display.display();
        */
        isUp = !isUp;
        Keyboard.write('j');
      }
    }
  }

  if (REDLState != REDLoldState)
  {
    // debounce
    if (millis() - REDLswitchPressTime >= debounceTime)
    {
      REDLswitchPressTime = millis();
      REDLoldState = REDLState;

      if(REDLState == LOW)
      {
        /*
        display.clearDisplay();

        if (isUp)
          display.drawBitmap(0, 0, donDown, bitmap_height, bitmap_width, WHITE);
        else
          display.drawBitmap(0, 0, donUp, bitmap_height, bitmap_width, WHITE);
          display.display();
        */
        isUp = !isUp;
        Keyboard.write('f');
      }
    }
  }

  if (BLUERState != BLUERoldState)
  {
    // debounce
    if (millis() - BLUERswitchPressTime >= debounceTime)
    {
      BLUERswitchPressTime = millis();
      BLUERoldState = BLUERState;

      if(BLUERState == LOW)
      {
        /*
        display.clearDisplay();

        if (isUp)
          display.drawBitmap(0, 0, kaDown, bitmap_height, bitmap_width, WHITE);
        else
          display.drawBitmap(0, 0, kaUp, bitmap_height, bitmap_width, WHITE);
          display.display();
*/
        isUp = !isUp;
        Keyboard.write('k');
      }
    }
  }

  if (BLUELState != BLUELoldState)
  {
    // debounce
    if (millis() - BLUELswitchPressTime >= debounceTime)
    {
      BLUELswitchPressTime = millis();
      BLUELoldState = BLUELState;

      if(BLUELState == LOW)
      {
        /*
        display.clearDisplay();

        if (isUp)
          display.drawBitmap(0, 0, kaDown, bitmap_height, bitmap_width, WHITE);
        else
          display.drawBitmap(0, 0, kaUp, bitmap_height, bitmap_width, WHITE);
          display.display();
*/
        isUp = !isUp;
        Keyboard.write('d');
      }
    }
  }
}
